"""
·ª®ng d·ª•ng backend ch√≠nh
X·ª≠ l√Ω c√°c API endpoints v√† ƒëi·ªÅu ph·ªëi d·ªãch v·ª•
"""
#
#                   _oo0oo_
#                  088888880
#                  88" . "88
#                  (| -_- |)
#                  0\  =  /0
#                ___/`---'\___
#              .' \\|     |// '.
#             / \\|||  :  |||// \
#            / _||||| -:- |||||_ \
#           |   | \\\  -  /// |   |
#           | \_|  ''\---/''  |_/ |
#           \  .-\__  '-'  ___/-. /
#         ___'. .'  /--.--\  `. .'___
#      ."" '<  `.___\_<|>_/___.' >' "".
#     | | :  `- \`.;`\ _ /`;.`/ - ` : | |
#     \  \ `_.   \_ __\ /__ _/   .-` /  /
# =====`-.____`.___ \_____/___.-`___.-'=====
#                   `=---='
#
#  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#         Ph·∫≠t ph√π h·ªô, kh√¥ng bao gi·ªù BUG
#
#  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import os
import json
from text_to_speech import TextToSpeechService
from speech_to_text import SpeechToTextService

app = Flask(__name__)
CORS(app)  # B·∫≠t CORS ƒë·ªÉ frontend c√≥ th·ªÉ giao ti·∫øp

# Kh·ªüi t·∫°o c√°c d·ªãch v·ª•
print("üîß ƒêang kh·ªüi t·∫°o c√°c d·ªãch v·ª• ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a...")
tts_service = TextToSpeechService()
stt_service = SpeechToTextService()

@app.route('/', methods=['GET'])
def home():
    """Endpoint ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng"""
    return jsonify({
        "status": "running",
        "message": "Sign Language Backend API - Phi√™n b·∫£n t·ªëi ∆∞u",
        "version": "1.2.0",
        "available_engines": {
            "tts": tts_service.get_available_engines(),
            "stt": stt_service.get_available_engines()
        },
        "voice_samples": tts_service.get_voice_samples()
    })

@app.route('/api/text-to-speech', methods=['POST'])
def text_to_speech():
    """Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v·ªõi l·ª±a ch·ªçn gi·ªçng t·ªëi ∆∞u"""
    try:
        data = request.get_json()
        
        if not data or 'text' not in data:
            return jsonify({"success": False, "error": "C·∫ßn c√≥ vƒÉn b·∫£n ƒë·ªÉ chuy·ªÉn ƒë·ªïi"}), 400
        
        text = data['text']
        language = data.get('language', 'vi')
        voice = data.get('voice', 'female')
        
        print(f"üîä Y√™u c·∫ßu TTS: text='{text[:50]}...', ng√¥n ng·ªØ={language}, gi·ªçng={voice}")
        
        result = tts_service.convert_text_to_speech(text, language, voice)
        
        print(f"‚úÖ TTS th√†nh c√¥ng: engine {result.get('engine', 'unknown')}, gi·ªçng: {result.get('voice_name', 'unknown')}")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå L·ªói TTS: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/speech-to-text', methods=['POST'])
def speech_to_text():
    """Chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n"""
    try:
        # X·ª≠ l√Ω upload file
        if 'audio' not in request.files:
            return jsonify({"success": False, "error": "C·∫ßn c√≥ file √¢m thanh"}), 400
        
        audio_file = request.files['audio']
        language = request.form.get('language', 'vi')
        
        if audio_file.filename == '':
            return jsonify({"success": False, "error": "Ch∆∞a ch·ªçn file"}), 400
        
        print(f"üé§ Y√™u c·∫ßu STT: file={audio_file.filename}, ng√¥n ng·ªØ={language}")
        
        # L∆∞u file upload t·∫°m th·ªùi
        temp_path = os.path.join("temp", audio_file.filename)
        os.makedirs("temp", exist_ok=True)
        audio_file.save(temp_path)
        
        # X·ª≠ l√Ω √¢m thanh
        result = stt_service.convert_speech_to_text(temp_path, language)
        
        # D·ªçn d·∫πp file t·∫°m
        if os.path.exists(temp_path):
            os.remove(temp_path)
        
        print(f"‚úÖ STT th√†nh c√¥ng: engine {result.get('engine', 'unknown')} ƒë√£ s·ª≠ d·ª•ng")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå L·ªói STT: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/start-recording', methods=['POST'])
def start_recording():
    """B·∫Øt ƒë·∫ßu ghi √¢m"""
    try:
        result = stt_service.start_recording()
        print(f"üé§ B·∫Øt ƒë·∫ßu ghi √¢m: {result.get('session_id')}")
        return jsonify(result)
    except Exception as e:
        print(f"‚ùå L·ªói b·∫Øt ƒë·∫ßu ghi √¢m: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/stop-recording', methods=['POST'])
def stop_recording():
    """D·ª´ng ghi √¢m"""
    try:
        data = request.get_json()
        session_id = data.get('session_id')
        
        if not session_id:
            return jsonify({"success": False, "error": "C·∫ßn c√≥ Session ID"}), 400
        
        result = stt_service.stop_recording(session_id)
        print(f"üé§ D·ª´ng ghi √¢m: {session_id}")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå L·ªói d·ª´ng ghi √¢m: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/download-audio/<filename>', methods=['GET'])
def download_audio(filename):
    """T·∫£i xu·ªëng file √¢m thanh ƒë√£ t·∫°o"""
    try:
        file_path = os.path.join("audio_output", filename)
        if os.path.exists(file_path):
            print(f"üì• T·∫£i xu·ªëng √¢m thanh: {filename}")
            return send_file(file_path, as_attachment=True)
        else:
            return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y file"}), 404
    except Exception as e:
        print(f"‚ùå L·ªói t·∫£i xu·ªëng: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/languages', methods=['GET'])
def get_languages():
    """L·∫•y danh s√°ch ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£ v·ªõi m√¥ t·∫£"""
    return jsonify({
        "success": True,
        "tts_languages": tts_service.get_supported_languages(),
        "stt_languages": stt_service.get_supported_languages()
    })

@app.route('/api/voices', methods=['GET'])
def get_voices():
    """L·∫•y danh s√°ch gi·ªçng n√≥i ƒë∆∞·ª£c h·ªó tr·ª£ cho TTS v·ªõi m√¥ t·∫£"""
    return jsonify({
        "success": True,
        "voices": tts_service.get_supported_voices(),
        "voice_samples": tts_service.get_voice_samples()
    })

@app.route('/api/engines', methods=['GET'])
def get_engines():
    """L·∫•y tr·∫°ng th√°i c√°c engines c√≥ s·∫µn"""
    return jsonify({
        "success": True,
        "tts_engines": tts_service.get_available_engines(),
        "stt_engines": stt_service.get_available_engines()
    })

@app.route('/api/test-voice', methods=['POST'])
def test_voice():
    """Test gi·ªçng n√≥i v·ªõi vƒÉn b·∫£n m·∫´u"""
    try:
        data = request.get_json()
        language = data.get('language', 'vi')
        voice = data.get('voice', 'female')
        
        # L·∫•y vƒÉn b·∫£n m·∫´u cho ng√¥n ng·ªØ
        voice_samples = tts_service.get_voice_samples()
        sample_text = voice_samples.get(language, {}).get('sample_text', 'Xin ch√†o, ƒë√¢y l√† test gi·ªçng n√≥i.')
        
        print(f"üéµ Test gi·ªçng n√≥i: ng√¥n ng·ªØ={language}, gi·ªçng={voice}")
        
        result = tts_service.convert_text_to_speech(sample_text, language, voice)
        
        print(f"‚úÖ Test gi·ªçng n√≥i th√†nh c√¥ng: {result.get('voice_name', 'unknown')}")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå L·ªói test gi·ªçng n√≥i: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Ki·ªÉm tra s·ª©c kh·ªèe chi ti·∫øt c·ªßa h·ªá th·ªëng"""
    try:
        # Ki·ªÉm tra c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
        directories = ["audio_output", "recordings", "temp"]
        dir_status = {}
        
        for directory in directories:
            dir_status[directory] = {
                "exists": os.path.exists(directory),
                "writable": os.access(directory, os.W_OK) if os.path.exists(directory) else False
            }
        
        # Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
        env_status = {
            "GOOGLE_API_KEY": bool(os.getenv('GOOGLE_API_KEY')),
            "GOOGLE_APPLICATION_CREDENTIALS": bool(os.getenv('GOOGLE_APPLICATION_CREDENTIALS')),
            "TTS_ENGINE": os.getenv('TTS_ENGINE', 'auto'),
            "STT_ENGINE": os.getenv('STT_ENGINE', 'auto')
        }
        
        return jsonify({
            "success": True,
            "status": "healthy",
            "directories": dir_status,
            "environment": env_status,
            "engines": {
                "tts": tts_service.get_available_engines(),
                "stt": stt_service.get_available_engines()
            }
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "status": "unhealthy",
            "error": str(e)
        }), 500

if __name__ == '__main__':
    # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
    os.makedirs("audio_output", exist_ok=True)
    os.makedirs("recordings", exist_ok=True)
    os.makedirs("temp", exist_ok=True)
    
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Sign Language Backend API - Phi√™n b·∫£n t·ªëi ∆∞u...")
    print("üì° API s·∫Ω c√≥ s·∫µn t·∫°i: http://localhost:5000")
    print("üìã C√°c endpoints c√≥ s·∫µn:")
    print("  - GET  /                     - Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng")
    print("  - POST /api/text-to-speech   - Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i")
    print("  - POST /api/speech-to-text   - Chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n")
    print("  - POST /api/start-recording  - B·∫Øt ƒë·∫ßu ghi √¢m")
    print("  - POST /api/stop-recording   - D·ª´ng ghi √¢m")
    print("  - GET  /api/languages        - L·∫•y ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£")
    print("  - GET  /api/voices           - L·∫•y gi·ªçng n√≥i ƒë∆∞·ª£c h·ªó tr·ª£")
    print("  - GET  /api/engines          - L·∫•y tr·∫°ng th√°i engines")
    print("  - POST /api/test-voice       - Test gi·ªçng n√≥i v·ªõi m·∫´u")
    print("  - GET  /api/health           - Ki·ªÉm tra s·ª©c kh·ªèe chi ti·∫øt")
    print("  - GET  /api/download-audio/<filename> - T·∫£i xu·ªëng file √¢m thanh")
    
    print("\nüîß Tr·∫°ng th√°i Engine:")
    print("TTS Engines:", tts_service.get_available_engines())
    print("STT Engines:", stt_service.get_available_engines())
    
    print("\nüéµ M·∫´u gi·ªçng n√≥i:")
    voice_samples = tts_service.get_voice_samples()
    for lang, samples in voice_samples.items():
        print(f"  {lang}: {samples['sample_text'][:50]}...")
    
    print("\n‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng!")
    app.run(debug=True, host='0.0.0.0', port=5000)