"""
D·ªãch v·ª• chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v·ªõi ElevenLabs API
Ch·ªâ s·ª≠ d·ª•ng ElevenLabs API - ƒê√£ lo·∫°i b·ªè ho√†n to√†n Google TTS v√† gTTS
"""

import os
import hashlib
import requests
from typing import Dict, Any
from dotenv import load_dotenv

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

class TextToSpeechService:
    def __init__(self):
        """Kh·ªüi t·∫°o d·ªãch v·ª• Text-to-Speech v·ªõi ElevenLabs API"""
        # ElevenLabs API configuration
        self.elevenlabs_api_key = os.getenv('ELEVENLABS_API_KEY')
        self.elevenlabs_base_url = "https://api.elevenlabs.io/v1"
        
        # Ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£
        self.supported_languages = {
            'vi': 'Ti·∫øng Vi·ªát',
            'en': 'English'
        }
        
        # C·∫•u h√¨nh gi·ªçng n√≥i ElevenLabs theo ng√¥n ng·ªØ - 2 gi·ªçng n·ªØ v√† 2 gi·ªçng nam
        self.voice_configs = {
            'vi': {  # Ti·∫øng Vi·ªát
                'female': {
                    'voice1': {
                        'voice_id': 'foH7s9fX31wFFH2yqrFa',  # Huyen - Female (Vietnamese)
                        'name': 'Huy·ªÅn',
                        'description': 'Gi·ªçng mi·ªÅn B·∫Øc'
                    },
                    'voice2': {
                        'voice_id': 'A5w1fw5x0uXded1LDvZp',  # Nhu - Female (Vietnamese)
                        'name': 'Nh∆∞',
                        'description': 'Gi·ªçng n·ªØ d·ªãu d√†ng, chuy√™n nghi·ªáp'
                    }
                },
                'male': {
                    'voice1': {
                        'voice_id': 'BUPPIXeDaJWBz696iXRS',  # VietDung - Male (Vietnamese)
                        'name': 'Vi·ªát D≈©ng',
                        'description': 'Gi·ªçng nam m·∫°nh m·∫Ω, t·ª± tin'
                    },
                    'voice2': {
                        'voice_id': '7hsfEc7irDn6E8br0qfw',  # Ly Hai - Male (Vietnamese)
                        'name': 'Ly Hai',
                        'description': 'Gi·ªçng mi·ªÅn Nam'
                    }
                }
            },
            'en': {  # Ti·∫øng Anh
                'female': {
                    'voice1': {
                        'voice_id': 'pBZVCk298iJlHAcHQwLr',  # Leoni Vergara - Female English
                        'name': 'Leoni Vergara',
                        'description': 'Young, energetic female voice'
                    },
                    'voice2': {
                        'voice_id': '2qfp6zPuviqeCOZIE9RZ',  # Christina - Female English
                        'name': 'Christina',
                        'description': 'Gentle, professional female voice'
                    }
                },
                'male': {
                    'voice1': {
                        'voice_id': 'wAGzRVkxKEs8La0lmdrE',  # Sully - Male English
                        'name': 'Sully',
                        'description': 'Strong, confident male voice'
                    },
                    'voice2': {
                        'voice_id': 'MFZUKuGQUsGJPQjTS4wC',  # Jon - Male English
                        'name': 'Jon',
                        'description': 'Young, friendly male voice'
                    }
                }
            }
        }
        
        # Gi·ªçng n√≥i ƒë∆∞·ª£c h·ªó tr·ª£
        self.supported_voices = {
            'male': 'Gi·ªçng Nam',
            'female': 'Gi·ªçng N·ªØ'
        }
        
        print("‚úÖ D·ªãch v·ª• Text-to-Speech v·ªõi ElevenLabs API ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
        if self.elevenlabs_api_key:
            print("‚úÖ ElevenLabs API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
        else:
            print("‚ùå ElevenLabs API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!")
            raise Exception("ElevenLabs API Key l√† b·∫Øt bu·ªôc!")

    def convert_text_to_speech(self, text: str, language: str = 'vi', voice: str = 'female', voice_id: str = None) -> Dict[str, Any]:
        """Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i b·∫±ng ElevenLabs API"""
        try:
            if not self.elevenlabs_api_key:
                raise Exception("ElevenLabs API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
            
            # Ki·ªÉm tra ƒë·∫ßu v√†o
            if not text.strip():
                raise ValueError("VƒÉn b·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            
            if language not in self.supported_languages:
                raise ValueError(f"Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {language}")
            
            if voice not in self.supported_voices:
                raise ValueError(f"Gi·ªçng n√≥i kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {voice}")
            
            # L·∫•y voice_id n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
            if not voice_id:
                # M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng voice1 cho m·ªói gi·ªõi t√≠nh theo ng√¥n ng·ªØ
                voice_id = self.voice_configs[language][voice]['voice1']['voice_id']
            
            # T√¨m th√¥ng tin gi·ªçng n√≥i
            voice_info = None
            for lang in self.voice_configs:
                for gender in self.voice_configs[lang]:
                    for voice_key, config in self.voice_configs[lang][gender].items():
                        if config['voice_id'] == voice_id:
                            voice_info = config
                            break
                    if voice_info:
                        break
                if voice_info:
                    break
            
            if not voice_info:
                voice_info = self.voice_configs[language][voice]['voice1']
                voice_id = voice_info['voice_id']
            
            # Chu·∫©n b·ªã request
            url = f"{self.elevenlabs_base_url}/text-to-speech/{voice_id}"
            
            headers = {
                "Accept": "audio/mpeg",
                "Content-Type": "application/json",
                "xi-api-key": self.elevenlabs_api_key
            }
            
            data = {
                "text": text,
                "model_id": "eleven_multilingual_v2",  # Model h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
                "voice_settings": {
                    "stability": 0.5,
                    "similarity_boost": 0.75,
                    "style": 0.0,
                    "use_speaker_boost": True
                }
            }
            
            print(f"üîä ƒêang g·ªçi ElevenLabs API v·ªõi voice: {voice_info['name']} ({voice_id})")
            
            # G·ª≠i request
            response = requests.post(url, json=data, headers=headers, timeout=30)
            
            if response.status_code != 200:
                error_msg = f"ElevenLabs API error: {response.status_code}"
                try:
                    error_detail = response.json()
                    error_msg += f" - {error_detail.get('detail', 'Unknown error')}"
                except:
                    error_msg += f" - {response.text}"
                raise Exception(error_msg)
            
            # L∆∞u √¢m thanh v√†o file
            text_hash = hashlib.md5(text.encode()).hexdigest()[:8]
            audio_filename = f"elevenlabs_{text_hash}_{language}_{voice}_{voice_info['name']}.mp3"
            audio_path = os.path.join("audio_output", audio_filename)
            os.makedirs("audio_output", exist_ok=True)
            
            with open(audio_path, "wb") as f:
                f.write(response.content)
            
            file_size = len(response.content)
            
            return {
                "success": True,
                "engine": "elevenlabs",
                "audio_path": audio_path,
                "audio_filename": audio_filename,
                "text": text,
                "language": language,
                "voice": voice,
                "voice_id": voice_id,
                "voice_name": voice_info['name'],
                "voice_description": voice_info['description'],
                "file_size": file_size,
                "quality": "premium"
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói ElevenLabs TTS: {e}")
            raise e

    def get_voice_options(self, language: str = 'vi') -> Dict[str, Any]:
        """L·∫•y danh s√°ch t√πy ch·ªçn gi·ªçng n√≥i chi ti·∫øt cho ElevenLabs theo ng√¥n ng·ªØ"""
        lang_config = self.voice_configs.get(language, self.voice_configs['vi'])
        
        result = {
            'female_voices': [],
            'male_voices': []
        }
        
        # Th√™m gi·ªçng n·ªØ
        for voice_key, voice_config in lang_config['female'].items():
            result['female_voices'].append({
                'id': voice_key,
                'voice_id': voice_config['voice_id'],
                'name': voice_config['name'],
                'description': voice_config['description']
            })
        
        # Th√™m gi·ªçng nam
        for voice_key, voice_config in lang_config['male'].items():
            result['male_voices'].append({
                'id': voice_key,
                'voice_id': voice_config['voice_id'],
                'name': voice_config['name'],
                'description': voice_config['description']
            })
        
        return result

    def get_voice_by_id(self, voice_id: str) -> Dict[str, Any]:
        """L·∫•y th√¥ng tin gi·ªçng n√≥i theo voice_id"""
        for language in self.voice_configs:
            for gender in self.voice_configs[language]:
                for voice_key, config in self.voice_configs[language][gender].items():
                    if config['voice_id'] == voice_id:
                        return {
                            'language': language,
                            'gender': gender,
                            'voice_key': voice_key,
                            'voice_id': voice_id,
                            'name': config['name'],
                            'description': config['description']
                        }
        return None
    
    def get_supported_languages(self) -> Dict[str, str]:
        """L·∫•y danh s√°ch ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£"""
        return self.supported_languages
    
    def get_supported_voices(self) -> Dict[str, str]:
        """L·∫•y danh s√°ch gi·ªçng n√≥i ƒë∆∞·ª£c h·ªó tr·ª£"""
        return self.supported_voices
    
    def get_available_engines(self) -> Dict[str, bool]:
        """L·∫•y tr·∫°ng th√°i c√°c TTS engines c√≥ s·∫µn"""
        return {
            "elevenlabs": self.elevenlabs_api_key is not None
        }
    
    def get_voice_samples(self) -> Dict[str, Any]:
        """L·∫•y vƒÉn b·∫£n m·∫´u ƒë·ªÉ test gi·ªçng n√≥i"""
        return {
            'vi': {
                'sample_text': 'Xin ch√†o, ƒë√¢y l√† gi·ªçng n√≥i ti·∫øng Vi·ªát t·ª´ ElevenLabs. Ch·∫•t l∆∞·ª£ng √¢m thanh r·∫•t t·ªët v√† ph√°t √¢m chu·∫©n.',
                'female_description': 'Gi·ªçng n·ªØ ElevenLabs t·ª± nhi√™n, ph√°t √¢m chu·∫©n, d·ªÖ nghe',
                'male_description': 'Gi·ªçng nam ElevenLabs t·ª± nhi√™n, ph√°t √¢m chu·∫©n, truy·ªÅn c·∫£m'
            },
            'en': {
                'sample_text': 'Hello, this is English voice from ElevenLabs. The audio quality is excellent with clear pronunciation.',
                'female_description': 'Natural ElevenLabs female voice, clear and pleasant',
                'male_description': 'Natural ElevenLabs male voice, professional and clear'
            }
        }

    def test_voice_by_id(self, voice_id: str, text: str = None, language: str = 'vi') -> Dict[str, Any]:
        """Test gi·ªçng n√≥i b·∫±ng voice_id c·ª• th·ªÉ"""
        if not text:
            samples = self.get_voice_samples()
            text = samples[language]['sample_text']
        
        voice_info = self.get_voice_by_id(voice_id)
        if not voice_info:
            raise ValueError(f"Voice ID kh√¥ng t·ªìn t·∫°i: {voice_id}")
        
        return self.convert_text_to_speech(
            text=text,
            language=language,
            voice=voice_info['gender'],
            voice_id=voice_id
        )

# V√≠ d·ª• s·ª≠ d·ª•ng
if __name__ == "__main__":
    try:
        tts_service = TextToSpeechService()
        
        print("üîä Engines c√≥ s·∫µn:", tts_service.get_available_engines())
        print("üéµ Voice options (VI):", tts_service.get_voice_options('vi'))
        print("üéµ Voice options (EN):", tts_service.get_voice_options('en'))
        
        # Test chuy·ªÉn ƒë·ªïi
        result = tts_service.convert_text_to_speech(
            text="Xin ch√†o, t√¥i l√† gi·ªçng n·ªØ ti·∫øng Vi·ªát t·ª´ ElevenLabs",
            language="vi",
            voice="female"
        )
        print("‚úÖ Test th√†nh c√¥ng:")
        print(f"   - Engine: {result['engine']}")
        print(f"   - Voice: {result['voice_name']}")
        print(f"   - File: {result['audio_filename']}")
        print(f"   - Size: {result['file_size']} bytes")
        
    except Exception as e:
        print(f"‚ùå Test th·∫•t b·∫°i: {e}")